/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-maddy.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : maddy
 #	author : miyako
 #	2025/06/17
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-maddy.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- maddy
            
			case 1 :
				_maddy(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

static void _maddy(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT t;
    t.fromParamAtIndex(pParams, 1);
    CUTF8String u8;
    t.copyUTF8String(&u8);
    
    std::shared_ptr<maddy::ParserConfig> config = std::make_shared<maddy::ParserConfig>();
    
    PA_ObjectRef options = PA_GetObjectParameter(params, 2);
    
    if(options != NULL) {
        
        config->enabledParsers = maddy::types::NONE;
        
        if(ob_is_defined(options, L"br")) {
            if(ob_get_b(options, L"br")) {
                config->enabledParsers |= maddy::types::BREAKLINE_PARSER;
            }
        }
        if(ob_is_defined(options, L"checklist")) {
            if(ob_get_b(options, L"checklist")) {
                config->enabledParsers |= maddy::types::CHECKLIST_PARSER;
            }
        }
        if(ob_is_defined(options, L"pre")) {
            if(ob_get_b(options, L"pre")) {
                config->enabledParsers |= maddy::types::CODE_BLOCK_PARSER;
            }
        }
        if(ob_is_defined(options, L"em")) {
            if(ob_get_b(options, L"em")) {
                config->enabledParsers |= maddy::types::EMPHASIZED_PARSER;
            }
        }
        if(ob_is_defined(options, L"h")) {
            if(ob_get_b(options, L"h")) {
                config->enabledParsers |= maddy::types::HEADLINE_PARSER;
            }
        }
        if(ob_is_defined(options, L"hr")) {
            if(ob_get_b(options, L"hr")) {
                config->enabledParsers |= maddy::types::HORIZONTAL_LINE_PARSER;
            }
        }
        if(ob_is_defined(options, L"html")) {
            if(ob_get_b(options, L"html")) {
                config->enabledParsers |= maddy::types::HTML_PARSER;
            }
        }
        if(ob_is_defined(options, L"img")) {
            if(ob_get_b(options, L"img")) {
                config->enabledParsers |= maddy::types::IMAGE_PARSER;
            }
        }
        if(ob_is_defined(options, L"code")) {
            if(ob_get_b(options, L"code")) {
                config->enabledParsers |= maddy::types::INLINE_CODE_PARSER;
            }
        }
        if(ob_is_defined(options, L"i")) {
            if(ob_get_b(options, L"i")) {
                config->enabledParsers |= maddy::types::ITALIC_PARSER;
            }
        }
        if(ob_is_defined(options, L"a")) {
            if(ob_get_b(options, L"a")) {
                config->enabledParsers |= maddy::types::LINK_PARSER;
            }
        }
        if(ob_is_defined(options, L"ol")) {
            if(ob_get_b(options, L"ol")) {
                config->enabledParsers |= maddy::types::ORDERED_LIST_PARSER;
            }
        }
        if(ob_is_defined(options, L"p")) {
            if(ob_get_b(options, L"p")) {
                config->enabledParsers |= maddy::types::PARAGRAPH_PARSER;
            }
        }
        if(ob_is_defined(options, L"blockquote")) {
            if(ob_get_b(options, L"blockquote")) {
                config->enabledParsers |= maddy::types::QUOTE_PARSER;
            }
        }
        if(ob_is_defined(options, L"s")) {
            if(ob_get_b(options, L"s")) {
                config->enabledParsers |= maddy::types::STRIKETHROUGH_PARSER;
            }
        }
        if(ob_is_defined(options, L"strong")) {
            if(ob_get_b(options, L"strong")) {
                config->enabledParsers |= maddy::types::STRONG_PARSER;
            }
        }
        if(ob_is_defined(options, L"table")) {
            if(ob_get_b(options, L"table")) {
                config->enabledParsers |= maddy::types::TABLE_PARSER;
            }
        }
        if(ob_is_defined(options, L"ul")) {
            if(ob_get_b(options, L"ul")) {
                config->enabledParsers |= maddy::types::UNORDERED_LIST_PARSER;
            }
        }
        if(ob_is_defined(options, L"latex")) {
            if(ob_get_b(options, L"latex")) {
                config->enabledParsers |= maddy::types::LATEX_BLOCK_PARSER;
            }
        }
        
    }else{
        config->enabledParsers = maddy::types::DEFAULT;
    }

    std::shared_ptr<maddy::Parser> parser = std::make_shared<maddy::Parser>(config);
    std::stringstream md((const char *)u8.c_str());
    std::string html = parser->Parse(md);

    C_TEXT r;
    r.setUTF8String((const uint8_t *)html.c_str(), (uint32_t)html.length());
    r.setReturn(pResult);
}
